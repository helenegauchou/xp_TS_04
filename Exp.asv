function [response accuracy response_time response_time_log excentricity quadrant] =...         Exp(task_type,target_presence,setsize,ISI)global win0 win1 winclear winCue winFeedback matrix_settings;global_settings;% Shape list % *******************************************************************************************************************************shapes = {'short_line','long_line','T_bar_left','T_bar_right','circle'};% Spatial locations for items ****************************************************************************************************************matlocperm = func_location(setsize);% Creates screen's items' color and shapes ******************************************************************************************************permstsz = randperm(setsize);target = permstsz(1); % defines target% draws shapes win1 & win2if target_presence == settings.TARGET_ABSENT;    for i=1:setsize        drawshapes(win1,shapes{1},matlocperm(i,1),matlocperm(i,2),settings.NON_TARGETS_COLOR);    endelse    for i=1:setsize        if i == target            drawshapes(win1,shapes{2},matlocperm(i,1),matlocperm(i,2),settings.TARGET_COLOR);        else            drawshapes(win1,shapes{1},matlocperm(i,1),matlocperm(i,2),settings.NON_TARGETS_COLOR);        end    endend% Creates cue screenif task_type == settings.TASK_1    cue = shapes{1};    xCue = (settings.SCREEN_X/2)-2;    yCue = (settings.SCREEN_Y/2)+(settings.LENGTH_SHORT_LINE/2);else    cue = shapes{3};    xCue = (settings.SCREEN_X/2)-(settings.LENGTH_SHORT_LINE/2);    yCue = (settings.SCREEN_Y/2)+(settings.LENGTH_LONG_LINE/2);enddrawshapes(winCue,cue,xCue,yCue,settings.NON_TARGETS_COLOR);drawshapes(winCue,shapes{5},settings.SCREEN_X/2, settings.SCREEN_Y/2,settings.NON_TARGETS_COLOR);% target's location with center of the screen as reference for data exportif target_presence == 1    X_loc_target = (matlocperm(target,1) - settings.SCREEN_X/2)/settings.CM;    Y_loc_target = (matlocperm(target,2) - settings.SCREEN_Y/2)/settings.CM;    excentricity = ceil(sqrt(X_loc_target^2 + Y_loc_target^2));        half_screen_X = 1;    half_screen_Y = 0;        if (X_loc_target > 0)        half_screen_X = 2;    end    if (Y_loc_target > 0)        half_screen_Y = 2;    end    quadrant = half_screen_X + half_screen_Y;endif target_presence == 0    excentricity = CONST_no_value;    quadrant = CONST_no_value;end% TRIAL BEGINS HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Displays CUE screen ***************************************************************************************************************************Screen(win0,'WaitBlanking');Screen('CopyWindow',winCue,win0);Screen(win0,'WaitBlanking',settings.DURATION_CUE);% Displays BLACK screen *************************************************************************************************************************DURATION_BLANK_1 = ISI - settings.DURATION_FIX - settings.DURATION_BLANK_2;Screen(win0,'WaitBlanking');Screen('CopyWindow',winclear,win0);Screen(win0,'WaitBlanking',DURATION_BLANK_1);% Displays FIXATION POINT screen ****************************************************************************************************************Screen(win0,'WaitBlanking');drawshapes(win0,shapes{5},settings.SCREEN_X/2, settings.SCREEN_Y/2,settings.NON_TARGETS_COLOR);Screen(win0,'WaitBlanking',settings.DURATION_FIX);% Displays BLACK screen *************************************************************************************************************************Screen(win0,'WaitBlanking');Screen('CopyWindow',winclear,win0);Screen(win0,'WaitBlanking',settings.DURATION_BLANK_2);% Displays TEST Screen *************************************************************************************************************************FlushEvents('keyDown');Screen(win0,'WaitBlanking');if task_type == settings.TASK_1    Screen('CopyWindow',win1,win0);elseif task_type == settings.CONJUNCTION_SEARCH    Screen('CopyWindow',win2,win0);endtrial_start_time = tic;while 1    if KbCheck == 1        response_time = round((toc(trial_start_time))*1000);        key = GetChar;        if (lower(key) == settings.LEFT_RESPONSE_KEY)||...           (lower(key) == settings.RIGHT_RESPONSE_KEY)||...           (lower(key) == settings.SS1_RESPONSE_KEY)||...           (lower(key) == settings.SS2_RESPONSE_KEY)||...           (lower(key) == settings.SS3_RESPONSE_KEY)            break        end    endendScreen('CopyWindow',winclear,win0);response_time_log = log10(response_time);% response coding ---------------------------------------------------------if task_type == settings.TASK_1if lower(key) == settings.LEFT_RESPONSE_KEY    response = settings.TARGET_ABSENT;endif lower(key) == settings.RIGHT_RESPONSE_KEY    response = settings.TARGET_PRESENT;endelse    if lower(key) == settings.SS1_RESPONSE_KEY    response = 3;endif lower(key) == settings.RIGHT_RESPONSE_KEY    response = settings.TARGET_PRESENT;end% accuracy coding -----------------------------------------------------accuracy = (target_presence == response);% Displays FEEDBACK screen *****************************************************************************************************************if accuracy == 0    error_message_color = settings.LETTER_COLOR_wrong;else    error_message_color = settings.LETTER_COLOR_right;enddrawshapes(winFeedback,shapes{5},settings.SCREEN_X/2, settings.SCREEN_Y/2,error_message_color);Screen(win0,'WaitBlanking');Screen('CopyWindow',winFeedback,win0);Screen(win0,'WaitBlanking',settings.DURATION_ERROR_MESSAGE);% Displays BLACK screen ( = ITI = Inter Trial Interval)*************************************************************************************%ITI = (ceil(1350 - (settings.DURATION_ERROR_MESSAGE - settings.DURATION_CUE - ISI)*(1000/60)))/(1000/60);Screen(win0,'WaitBlanking');Screen('CopyWindow',winclear,win0);Screen(win0,'WaitBlanking',settings.DURATION_ITI);% clear the windowsScreen('CopyWindow',winclear,win0);Screen('CopyWindow',winclear,win1);Screen('CopyWindow',winclear,win2);Screen('CopyWindow',winclear,winCue);Screen('CopyWindow',winclear,winFeedback);end